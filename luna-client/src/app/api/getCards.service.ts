/**
 * Tarot Card Meanings REST API
 * Card names, descriptions, and divinatory meanings according to AE Waite's Pictorial Key to the Tarot (1910), the companion to the Rider-Waite-Smith (RWS) deck upon which most newer decks are based.
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }  from '../encoder';
import { Observable } from 'rxjs';

import { CardList } from '../models/cardList';
import { Value } from '../models/value';
import { BASE_PATH, COLLECTION_FORMATS }       from '../../../variables';
import { Configuration }  from '../configuration';


@Injectable()
export class GetCardsService {

    protected basePath = 'https://rws-cards-api.herokuapp.com/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param rank 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsCourtsRankGet(rank: string, observe?: 'body', reportProgress?: boolean): Observable<CardList>;
    public cardsCourtsRankGet(rank: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CardList>>;
    public cardsCourtsRankGet(rank: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CardList>>;
    public cardsCourtsRankGet(rank: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (rank === null || rank === undefined) {
            throw new Error('Required parameter rank was null or undefined when calling cardsCourtsRankGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CardList>('get',`${this.basePath}/cards/courts/${encodeURIComponent(String(rank))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsGet(observe?: 'body', reportProgress?: boolean): Observable<CardList>;
    public cardsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CardList>>;
    public cardsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CardList>>;
    public cardsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CardList>('get',`${this.basePath}/cards`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param n If specified and between 1 and 78, returns n number of unique random cards. Else, returns all cards in random order.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsRandomGet(n?: number, observe?: 'body', reportProgress?: boolean): Observable<CardList>;
    public cardsRandomGet(n?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CardList>>;
    public cardsRandomGet(n?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CardList>>;
    public cardsRandomGet(n?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (n !== undefined && n !== null) {
            queryParameters = queryParameters.set('n', <any>n);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CardList>('get',`${this.basePath}/cards/random`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param q Search all for text (case insensitive)
     * @param suit Returns only cards of specified suit. e.g. search?suit&#x3D;wands
     * @param value Returns only cards of specified value, e.g. search?value&#x3D;4
     * @param type Returns only cards of specified type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsSearchGet(q?: string, suit?: string, value?: Value, type?: string, observe?: 'body', reportProgress?: boolean): Observable<CardList>;
    public cardsSearchGet(q?: string, suit?: string, value?: Value, type?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CardList>>;
    public cardsSearchGet(q?: string, suit?: string, value?: Value, type?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CardList>>;
    public cardsSearchGet(q?: string, suit?: string, value?: Value, type?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (q !== undefined && q !== null) {
            queryParameters = queryParameters.set('q', <any>q);
        }
        if (suit !== undefined && suit !== null) {
            queryParameters = queryParameters.set('suit', <any>suit);
        }
        if (value !== undefined && value !== null) {
            queryParameters = queryParameters.set('value', <any>value);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CardList>('get',`${this.basePath}/cards/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param suit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cardsSuitsSuitGet(suit: string, observe?: 'body', reportProgress?: boolean): Observable<CardList>;
    public cardsSuitsSuitGet(suit: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CardList>>;
    public cardsSuitsSuitGet(suit: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CardList>>;
    public cardsSuitsSuitGet(suit: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (suit === null || suit === undefined) {
            throw new Error('Required parameter suit was null or undefined when calling cardsSuitsSuitGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<CardList>('get',`${this.basePath}/cards/suits/${encodeURIComponent(String(suit))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
